{"version":3,"sources":["components/card/index.js","components/card-list/CardList.js","components/search-box/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","useState","users","setUsers","setError","search","setSearch","console","log","useEffect","fetch","then","res","json","catch","err","filteredMonster","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAGaA,G,kBAAO,SAAAC,GAChB,OAAM,yBAAKC,UAAY,kBAEf,yBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCMfC,EAVE,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACf,OAAO,yBAAKR,UAAW,aAEnBQ,EAAUA,EAASC,KAAI,SAAAN,GACvB,OAAM,kBAAC,EAAD,CAAMO,IAAOP,EAAQC,GAAID,QAAWA,OACrC,OCNAQ,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAM,2BAAOb,UAAY,SAASc,KAAO,SAASF,YAAeA,EAAaG,SAAYF,MCgC/EG,MA/Bf,WAAgB,IAAD,EAEaC,qBAFb,mBAENC,EAFM,KAECC,EAFD,OAGaF,mBAAS,IAHtB,mBAGCG,GAHD,aAIeH,qBAJf,mBAINI,EAJM,KAIEC,EAJF,KAKbC,QAAQC,IAAI,sBAAoBN,EAAOG,GAEvCI,qBAAU,WACRC,MAFU,8CAECC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAC,GACtCT,EAASS,MACRE,OAAM,SAAAC,GACPX,EAASW,QAEV,IAEH,IAAMC,EAAkBd,EAAOA,EAAMe,QAAO,SAAA9B,GAC1C,OAAOA,EAAQE,KAAK6B,cAAcC,SAASd,EAAOA,EAAOa,cAAc,OACpE,GAGL,OAFAX,QAAQC,IAAI,0BAAwBQ,GAGlC,yBAAKhC,UAAU,OACX,+CACA,kBAAC,EAAD,CAAWa,aAAgB,SAAAuB,GAAC,OAAId,EAAUc,EAAEC,OAAOC,QACnD1B,YAAc,mBAChB,kBAAC,EAAD,CAAUJ,SAAUwB,MClBNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.e8e76b83.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nexport const Card = props=> {\n    return<div className = 'card-container'>\n\n            <img alt='monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div> \n};","import React from 'react';\nimport './CardList.css';\nimport {Card} from '../card';\n\nconst CardList = ({monsters}) =>{\n    return(<div className= 'card-list'>\n        {\n        monsters? monsters.map(monster => {\n        return<Card key = {monster.id} monster = {monster} />\n        }) : null\n      }\n    </div>)\n}\n\nexport default CardList;","import React from 'react';\nimport './searchBox.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return<input className = 'search' type = 'search' placeholder = {placeholder} onChange = {handleChange}/>\n}","import React, {useState, useEffect} from 'react';\nimport './App.css'; \nimport CardList from '../src/components/card-list/CardList';\nimport {SearchBox} from '../src/components/search-box';\n\nfunction App() {\n\n  const [users, setUsers] = useState();\n  const [error, setError] = useState({});\n  const [search, setSearch] = useState();\n  console.log(\"search -------> \", users, search);\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(res => {\n      setUsers(res);\n    }).catch(err => {\n      setError(err);\n    });\n  }, []);\n\n  const filteredMonster = users? users.filter(monster => {\n    return monster.name.toLowerCase().includes(search?search.toLowerCase():'');\n  }) : \"\";\n  console.log(\"filteredMonster --->\", filteredMonster);\n  \n  return (\n    <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox handleChange = {e => setSearch(e.target.value)}\n        placeholder = 'Search Monster'/>\n      <CardList monsters={filteredMonster} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}